--- src/capabilities/simplemd.h
+++ src/capabilities/simplemd.h
@@ -40,8 +40,52 @@ struct BiasStructure {
     double rmsd_reference = 0;
     double energy = 0;
     int counter = 0;
+    int index = 0;
 };
 
+
+class BiasThread : public CxxThread
+{
+public:
+    BiasThread(const Molecule &reference, const json &rmsdconfig);
+    ~BiasThread();
+
+    virtual int execute() override;
+    inline void addGeometry(const Geometry &geometry, double rmsd, double time, int index)
+    {
+        BiasStructure str;
+        str.geometry = geometry;
+        str.rmsd_reference = rmsd;
+        str.time = time;
+        str.counter = 1;
+        str.index = index;
+        m_biased_structures.push_back(str);
+    }
+
+    inline void setCurrentGeometry(const Geometry &geometry, double currentStep)
+    {
+        m_current_geometry = geometry;
+        m_currentStep = currentStep;
+    }
+
+    inline Geometry Gradient() const { return m_gradient;}
+    inline double RMSDReference() const { return m_rmsd_reference;}
+    inline void setk(double k){ m_k = k;}
+    inline void setalpha(double alpha){m_alpha = alpha;}
+    inline void setDT(double DT){ m_DT = DT;}
+    inline void setEnergyConv(double energy_conv){ m_energy_convergency = energy_conv; }
+
+private:
+    RMSDDriver* m_driver;
+    Geometry m_gradient, m_current_geometry;
+    std::vector<BiasStructure> m_biased_structures;
+    json m_config;
+    Molecule m_reference, m_target;
+    double m_k, m_alpha, m_DT, m_currentStep, m_rmsd_reference, m_current_bias, m_energy_convergency;
+    bool wt_mtd = false;
+};
+
+
 static json CurcumaMDJson{
     { "writeXYZ", true },
     { "printOutput", true },
@@ -102,7 +147,8 @@ static json CurcumaMDJson{
     { "rmsd_rmsd", 1 },
     { "mtd_steps", 1 },
     { "max_rmsd_N", -1 },
-    { "multi_rmsd", 1e8 }
+    { "rmsd_econv", 1e8 },
+    { "rmsd_ref_file", "none"}
 };
 
 class SimpleMD : public CurcumaMethod {
@@ -232,15 +279,17 @@ private:
     double m_alpha_rmsd = 0.5;
     double m_bias_energy = 0;
     double m_rmsd_rmsd = 1;
-    double m_mult_rmsd = 1e4;
+    double m_rmsd_econv = 1e8;
     int m_max_rmsd_N = -1;
     int m_mtd_steps = 10;
     int m_rattle = 0;
     int m_colvar_incr = 0;
+    int m_threads = 0;
+    int m_bias_structure_count = 0;
     std::vector<double> m_collected_dipole;
     Matrix m_topo_initial;
     std::vector<Molecule*> m_unique_structures;
-    std::string m_method = "UFF", m_initfile = "none", m_thermostat = "csvr", m_plumed;
+    std::string m_method = "UFF", m_initfile = "none", m_thermostat = "csvr", m_plumed, m_rmsd_ref_file;
     bool m_unstable = false;
     bool m_dipole = false;
     bool m_clean_energy = false;
